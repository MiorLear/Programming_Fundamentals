# -*- coding: utf-8 -*-
"""12. Código base. Investigación recursiva.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yMR5rocCTvO2KmYIudhuSilkSyv0HoCO
"""

mapa = [
    ['S', '.', '.', 'X', '.', '.', '.', 'X', '.', '.', '.', '.'],
    ['X', 'X', '.', 'X', '.', 'X', '.', '.', 'X', 'X', '.', '.'],
    ['.', '.', '.', '.', '?', '.', 'X', '.', '.', '.', '?', '.'],
    ['.', 'X', 'X', '.', 'X', '.', 'X', 'X', '.', 'X', '.', '.'],
    ['.', '.', '?', '.', '.', '.', '.', '.', '.', '?', 'X', '.'],
    ['X', '.', 'X', 'X', '.', 'X', 'X', '.', 'X', '.', '.', '.'],
    ['.', '.', '.', '.', '?', '.', '.', '?', '.', 'X', '.', '.'],
    ['X', 'X', '.', 'X', '.', 'X', '.', 'X', '.', '.', 'X', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', 'X', '?', '.', '.'],
    ['X', '.', 'X', '.', '?', '.', 'X', '.', '.', '.', '.', 'A']
]

# ---------------------------------------------------------------
# Esta función fue generada con el apoyo de inteligencia artificial,
# con fines educativos para mejorar la visualización de mapas en actividades
# relacionadas con programación y recursión en Python.
# ---------------------------------------------------------------
def mostrar_mapa(mapa):
  """
  Muestra visualmente una matriz 2D en la consola, usando colores ANSI para representar
  distintos tipos de celdas.

  Args:
      mapa (list[list[str]]): Matriz 2D que representa el mapa de la investigación.
  """
  colores = {
      'S': '\033[94mS\033[0m',  # Azul para el inicio
      'A': '\033[92mA\033[0m',  # Verde para la arqueóloga
      '.': '\033[37m·\033[0m',  # Gris claro para zona segura
      'X': '\033[91mX\033[0m',  # Rojo para zona corrupta
      '?': '\033[93m?\033[0m',  # Amarillo para pista
      'v': '\033[90mv\033[0m',  # Gris oscuro para visitado
  }

  print("╔" + "═══" * len(mapa[0]) + "╗")
  for fila in mapa:
      linea = "║"
      for celda in fila:
          simbolo = colores.get(celda, celda)
          linea += f" {simbolo} "
      linea += "║"
      print(linea)
  print("╚" + "═══" * len(mapa[0]) + "╝")

mostrar_mapa(mapa)

def buscar_inicio(mapa):
  """
  Busca la posición del símbolo 'S' en una matriz 2D llamada 'mapa'.

  Returns:
      tuple[int, int] or tuple[None, None]: Una tupla con la posición (fila, columna)
      donde se encuentra 'S'. Si no se encuentra, retorna (None, None).
  """

  for i in range(len(mapa)):
        for j in range(len(mapa[i])):
            if mapa[i][j] == "S":
                print(i, j)
                return(i,j)
  return None, None
  None

buscar_inicio(mapa)

def buscar_objetivo(mapa, x, y):
  """
  Realiza una búsqueda recursiva en una matriz 2D para encontrar el objetivo 'A'.

  La función verifica si desde la posición (x, y) es posible alcanzar una celda con el
  carácter 'A', evitando zonas corruptas ('X') y celdas ya visitadas ('v').
  Marca las celdas visitadas durante la exploración para evitar ciclos infinitos.

  Args:
      mapa (list[list[str]]): Matriz 2D que representa el mapa, donde:
          - 'A' es el objetivo a encontrar,
          - 'X' representa zonas corruptas,
          - cualquier otro carácter representa un espacio transitable.
      x (int): Fila inicial desde la cual comenzar la búsqueda.
      y (int): Columna inicial desde la cual comenzar la búsqueda.

  Returns:
      bool: 'True' si se encuentra el objetivo 'A'; 'False' en caso contrario.
  """
  None

